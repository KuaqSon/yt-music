{"version":3,"sources":["service/audio.js","App.js","serviceWorker.js","index.js"],"names":["getAudioSource","vid","a","fetch","then","response","audio_streams","ok","text","data","parseData","split","reduce","params","param","paramSplit","map","value","decodeURIComponent","replace","playerResp","JSON","parse","player_response","adaptiveFormats","streamingData","forEach","stream","n","quality","itag","url","getAudioInfo","App","useState","audioSrc","setAudioSrc","activeMenu","setActiveMenu","useEffect","src","console","log","info","getNaviClass","key","className","style","width","left","href","onClick","id","autoPlay","controls","loop","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sOAUA,IAAMA,EAAc,uCAAG,WAAMC,GAAN,SAAAC,EAAA,sEACRC,MACX,WACEF,EACA,wIACAA,GACFG,MAAK,SAAAC,GACL,IAAIC,EAAgB,GACpB,OAAKD,EAASE,GAGPF,EAASG,OAAOJ,MAAK,SAAAK,GAC1B,IAAMC,EAAsBD,EArBrBE,MAAM,KAAKC,QAAO,SAASC,EAAQC,GAC5C,IAAMC,EAAaD,EAAMH,MAAM,KAAKK,KAAI,SAASC,GAC/C,OAAOC,mBAAmBD,EAAME,QAAQ,IAAK,SAG/C,OADAN,EAAOE,EAAW,IAAMA,EAAW,GAC5BF,IACN,IAgBGO,EAAaC,KAAKC,MAAMZ,EAAUa,iBAEhCC,EAAkB,GAuBtB,OArBIJ,GAAcA,EAAWK,eAAiBL,EAAWK,cAAcD,kBACrEA,EAAkBJ,EAAWK,cAAcD,iBAG7CA,EAAgBE,SAAQ,SAASC,EAAQC,GACvC,IACIC,GAAU,EACd,OAF2B,EAAdF,EAAOG,MAGlB,KAAK,IACHD,EAAU,SACV,MACF,KAAK,IACHA,EAAU,UACV,MACF,KAAK,IACHA,EAAU,UAGVA,IAASvB,EAAcuB,GAAWF,EAAOI,QAGxCzB,EAAc,cA7Bd,QATU,mFAAH,sDA2Cd0B,EAAY,uCAAG,WAAM/B,GAAN,eAAAC,EAAA,6DACb6B,EADa,oFACsE9B,GADtE,SAGNE,MAAM4B,GAAK3B,MAAK,SAAAC,GAC3B,OAAOA,EAASG,OAAOJ,MAAK,SAAAK,GAC1B,OAAOY,KAAKC,MAAMb,SALH,mFAAH,sD,MCHHwB,MA9Cf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEuBF,mBAAS,GAFhC,mBAENG,EAFM,KAEMC,EAFN,KAIbC,qBAAU,WACRvC,EAAe,eAAeI,MAAK,SAAAoC,GACjCC,QAAQC,IAAI,kBAAmBF,GAC/BJ,EAAYI,MAEdR,EAAa,eAAe5B,MAAK,SAAAuC,GAC/BF,QAAQC,IAAI,mBAAoBC,QAEjC,IAEH,IAAMC,EAAe,SAAAC,GACnB,OAAIA,IAAQR,EACH,kBAEA,YAIX,OACE,yBAAKS,UAAU,OACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,WAAWC,MAAO,CAAEC,MAAO,QAASC,KAAK,GAAD,OAAkB,IAAbZ,EAAL,SACvD,uBAAGa,KAAK,IAAIJ,UAAWF,EAAa,GAAIO,QAAS,kBAAMb,EAAc,KAArE,OAGA,uBAAGY,KAAK,IAAIJ,UAAWF,EAAa,GAAIO,QAAS,kBAAMb,EAAc,KAArE,UAGA,uBAAGY,KAAK,IAAIJ,UAAWF,EAAa,GAAIO,QAAS,kBAAMb,EAAc,KAArE,cAMJ,6BACE,2BAAOc,GAAG,UAAUC,UAAU,EAAMC,UAAU,EAAMC,MAAM,EAAMf,IAAKL,OChCzDqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/D,MAAK,SAAAgE,GACjCA,EAAaC,iB","file":"static/js/main.9dfb3b0e.chunk.js","sourcesContent":["function parse_str(str) {\r\n  return str.split(\"&\").reduce(function(params, param) {\r\n    const paramSplit = param.split(\"=\").map(function(value) {\r\n      return decodeURIComponent(value.replace(\"+\", \" \"));\r\n    });\r\n    params[paramSplit[0]] = paramSplit[1];\r\n    return params;\r\n  }, {});\r\n}\r\n\r\nconst getAudioSource = async vid => {\r\n  return await fetch(\r\n    \"https://\" +\r\n      vid +\r\n      \"-focus-opensocial.googleusercontent.com/gadgets/proxy?container=none&url=https%3A%2F%2Fwww.youtube.com%2Fget_video_info%3Fvideo_id%3D\" +\r\n      vid\r\n  ).then(response => {\r\n    let audio_streams = {};\r\n    if (!response.ok) {\r\n      return null;\r\n    }\r\n    return response.text().then(data => {\r\n      const parseData = parse_str(data),\r\n        playerResp = JSON.parse(parseData.player_response);\r\n\r\n      let adaptiveFormats = [];\r\n\r\n      if (playerResp && playerResp.streamingData && playerResp.streamingData.adaptiveFormats) {\r\n        adaptiveFormats = playerResp.streamingData.adaptiveFormats;\r\n      }\r\n\r\n      adaptiveFormats.forEach(function(stream, n) {\r\n        const itag = stream.itag * 1;\r\n        let quality = false;\r\n        switch (itag) {\r\n          case 139:\r\n            quality = \"48kbps\";\r\n            break;\r\n          case 140:\r\n            quality = \"128kbps\";\r\n            break;\r\n          case 141:\r\n            quality = \"256kbps\";\r\n            break;\r\n        }\r\n        if (quality) audio_streams[quality] = stream.url;\r\n      });\r\n\r\n      return audio_streams[\"128kbps\"];\r\n    });\r\n  });\r\n};\r\n\r\nconst getAudioInfo = async vid => {\r\n  const url = `https://noembed.com/embed?format=json&url=https://www.youtube.com/watch?v=${vid}`;\r\n\r\n  return await fetch(url).then(response => {\r\n    return response.text().then(data => {\r\n      return JSON.parse(data);\r\n    });\r\n  });\r\n};\r\n\r\nconst getVidFromYoutubeUrl = url => {\r\n  const video_id = url.split(\"v=\")[1];\r\n  const ampersandPosition = video_id.indexOf(\"&\");\r\n  if (ampersandPosition !== -1) {\r\n    return video_id.substring(0, ampersandPosition);\r\n  }\r\n\r\n  return \"\";\r\n};\r\n\r\nexport { getAudioSource, getAudioInfo, getVidFromYoutubeUrl };\r\n","import React, { useState, useEffect } from \"react\";\nimport { getAudioSource, getAudioInfo } from \"./service/audio\";\nimport \"./App.css\";\n\nfunction App() {\n  const [audioSrc, setAudioSrc] = useState(\"\");\n  const [activeMenu, setActiveMenu] = useState(0);\n\n  useEffect(() => {\n    getAudioSource(\"9ue1DivJxes\").then(src => {\n      console.log(\"TCL: App -> src\", src);\n      setAudioSrc(src);\n    });\n    getAudioInfo(\"9ue1DivJxes\").then(info => {\n      console.log(\"TCL: App -> info\", info);\n    });\n  }, []);\n\n  const getNaviClass = key => {\n    if (key === activeMenu) {\n      return \"tab_item active\";\n    } else {\n      return \"tab_item\";\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        <nav className=\"tabs\">\n          <div className=\"selector\" style={{ width: \"112px\", left: `${activeMenu * 112}px` }}></div>\n          <a href=\"#\" className={getNaviClass(0)} onClick={() => setActiveMenu(0)}>\n            New\n          </a>\n          <a href=\"#\" className={getNaviClass(1)} onClick={() => setActiveMenu(1)}>\n            Player\n          </a>\n          <a href=\"#\" className={getNaviClass(2)} onClick={() => setActiveMenu(2)}>\n            PlayList\n          </a>\n        </nav>\n      </div>\n\n      <div>\n        <audio id=\"youtube\" autoPlay={true} controls={true} loop={true} src={audioSrc}></audio>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
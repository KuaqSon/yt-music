{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["parse_str","str","split","reduce","params","param","paramSplit","map","value","decodeURIComponent","replace","App","useState","audioSrc","setAudioSrc","useEffect","vid","fetch","then","response","console","log","audio_streams","ok","text","data","parseData","url_encoded_fmt_stream_map","adaptive_fmts","forEach","s","n","stream","itag","quality","url","className","id","autoPlay","controls","loop","src","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oPAGA,SAASA,EAAUC,GACjB,OAAOA,EAAIC,MAAM,KAAKC,QAAO,SAASC,EAAQC,GAC5C,IAAMC,EAAaD,EAAMH,MAAM,KAAKK,KAAI,SAASC,GAC/C,OAAOC,mBAAmBD,EAAME,QAAQ,IAAK,SAG/C,OADAN,EAAOE,EAAW,IAAMA,EAAW,GAC5BF,IACN,IAoEUO,MAjEf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,KAoDb,OAjDAC,qBAAU,WACR,IAAkBC,IA6CR,cA5CRC,MACE,WACED,EACA,wIACAA,GACFE,MAAK,SAAAC,GACLC,QAAQC,IAAI,WAAYF,GACxB,IAAIG,EAAgB,GAChBH,EAASI,IACXJ,EAASK,OAAON,MAAK,SAAAO,GACnB,IAAMC,EAAY1B,EAAUyB,IAExBC,EAAUC,2BACV,IACAD,EAAUE,eACV1B,MAAM,KAEF2B,SAAQ,SAASC,EAAGC,GAC1B,IAAMC,EAAShC,EAAU8B,GACvBG,EAAqB,EAAdD,EAAOC,KACZC,GAAU,EAEd,OADAd,QAAQC,IAAIW,GACJC,GACN,KAAK,IACHC,EAAU,SACV,MACF,KAAK,IACHA,EAAU,UACV,MACF,KAAK,IACHA,EAAU,UAGVA,IAASZ,EAAcY,GAAWF,EAAOG,QAG/Cf,QAAQC,IAAI,gBAAiBC,GAE7BR,EAAYQ,EAAc,oBAOjC,IAGD,yBAAKc,UAAU,OACb,2BACEC,GAAG,UACHC,UAAU,EACVC,UAAU,EACVC,MAAM,EACNC,IAAK5B,MC5DO6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.804a6bc0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction parse_str(str) {\n  return str.split(\"&\").reduce(function(params, param) {\n    const paramSplit = param.split(\"=\").map(function(value) {\n      return decodeURIComponent(value.replace(\"+\", \" \"));\n    });\n    params[paramSplit[0]] = paramSplit[1];\n    return params;\n  }, {});\n}\n\nfunction App() {\n  const [audioSrc, setAudioSrc] = useState(\"\");\n\n  useEffect(() => {\n    const fetchData = vid => {\n      fetch(\n        \"https://\" +\n          vid +\n          \"-focus-opensocial.googleusercontent.com/gadgets/proxy?container=none&url=https%3A%2F%2Fwww.youtube.com%2Fget_video_info%3Fvideo_id%3D\" +\n          vid\n      ).then(response => {\n        console.log(\"response\", response);\n        let audio_streams = {};\n        if (response.ok) {\n          response.text().then(data => {\n            const parseData = parse_str(data),\n              streams = (\n                parseData.url_encoded_fmt_stream_map +\n                \",\" +\n                parseData.adaptive_fmts\n              ).split(\",\");\n\n            streams.forEach(function(s, n) {\n              const stream = parse_str(s),\n                itag = stream.itag * 1;\n              let quality = false;\n              console.log(stream);\n              switch (itag) {\n                case 139:\n                  quality = \"48kbps\";\n                  break;\n                case 140:\n                  quality = \"128kbps\";\n                  break;\n                case 141:\n                  quality = \"256kbps\";\n                  break;\n              }\n              if (quality) audio_streams[quality] = stream.url;\n            });\n\n            console.log(\"audio_streams\", audio_streams);\n\n            setAudioSrc(audio_streams[\"128kbps\"]);\n          });\n        }\n      });\n    };\n\n    fetchData(\"dr2lsCSYG2A\");\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <audio\n        id=\"youtube\"\n        autoPlay={true}\n        controls={true}\n        loop={true}\n        src={audioSrc}\n      ></audio>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}